---
title: "UNBLK_TB_analysis"
author: "Tom Beesley"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(BayesFactor)
library(afex)
library(emmeans)
library(scales)
library(patchwork)

load("UNL03_proc_data.RData")

cond_colours <- c("#009E73", "#F0E442", "#0072B2", "#D55E00")

training <- 
  training %>% 
  select(pNum, condition, stage, block, acc = correct_answer, rt = cue_o_mouse.time)

p_stage1_avgs <- 
  training %>% 
  filter(stage == "stage1") %>% 
  group_by(pNum, condition) %>% 
  summarise(mean_acc = mean(acc, na.rm = TRUE),
            mean_rt = mean(rt, na.rm = TRUE)) %>% 
  group_by(condition) %>% 
  arrange(desc(mean_acc)) %>% 
  mutate(condition_rank = 1:n()) %>% 
  ungroup()

training <- 
  training %>% 
  left_join(p_stage1_avgs, by = c("pNum", "condition"))

p_avgs <- 
  training %>% 
  filter(condition_rank <= 20) %>% 
  group_by(pNum, condition, block) %>% 
  summarise(mean_acc = mean(acc, na.rm = TRUE))
  
group_avgs <- 
  p_avgs %>% 
  group_by(condition, block) %>% 
  summarise(group_mean_acc = mean(mean_acc, na.rm = TRUE),
            group_se_acc = sd(mean_acc, na.rm = TRUE)/sqrt(n()))

group_avgs %>% 
  ggplot(aes(x = block, y = group_mean_acc, 
             colour = condition, fill = condition,  group = condition)) +
  geom_line(linewidth = .6, colour = "black") +
  geom_errorbar(aes(ymin = group_mean_acc - group_se_acc, 
                    ymax = group_mean_acc + group_se_acc),
                width = .2) +
  geom_point(size = 6, shape = 21, colour = "black") +
  theme_classic(base_size = 16) +
  scale_color_manual(values = cond_colours[c(1,3,4)]) +
  scale_fill_manual(values = cond_colours[c(1,3,4)]) +
  scale_x_continuous(breaks = 1:16) +
  coord_cartesian(ylim = c(.5,1)) +
  labs(y = "Prop. probable response (accuracy)",
       x = "Block (20 trials)",
       fill = "",
       colour = "")

```


```{r}

# p_stage1_avgs %>% 
#   ggplot(aes(x = condition, y = mean_acc)) +
#   geom_violin() +
#   geom_jitter()


```

```{r}
p_avgs_test <- 
  test %>% 
  drop_na(O1_rating, O2_rating) %>% 
  filter(pNum != 89) %>%
  group_by(pNum, stage, block, condition, testcue) %>% 
  summarise(avgO1 = mean(O1_rating, na.rm = TRUE),
            avgO2 = mean(O2_rating, na.rm = TRUE))
  

grp_avgs_test <- 
  p_avgs_test %>% 
  pivot_longer(cols = avgO1:avgO2, 
               values_to = "mean_rating", 
               names_to = "outcome", 
               names_prefix = "avgO") %>% 
  group_by(condition, stage, testcue, outcome) %>% 
  summarise(grp_avg = mean(mean_rating),
            grp_se = sd(mean_rating)/sqrt(n()))

# plotting individual cues
grp_avgs_test %>% 
  ggplot(aes(x = testcue, y = grp_avg, fill = outcome)) +
  geom_col(position = position_dodge()) +
  facet_wrap(vars(condition, stage))

# combine data into P and NP cue types
p_pred_avgs <- 
  p_avgs_test %>% 
  mutate(rating_diff = avgO1-avgO2,
         rating_diff_adj = case_match(testcue,
                                      "A"~rating_diff,
                                      "B"~-rating_diff,
                                      "X"~rating_diff,
                                      "Y"~-rating_diff),
         cue_type = case_match(testcue,
                               "A"~"P",
                               "B"~"P",
                               "X"~"NP",
                               "Y"~"NP")) %>% 
  group_by(pNum, condition, stage, block, cue_type) %>% 
  summarise(avg_diff_score = round(mean(rating_diff_adj),3)) %>% 
  ungroup() %>% 
  mutate(across(pNum:cue_type, as.factor),
         cue_type = fct_relevel(cue_type, "P"))

# join to data on stage 1 performance
p_stage1_avgs <- 
  p_stage1_avgs %>% 
  mutate(across(c(pNum,condition), as.factor))

p_pred_avgs <- 
  p_pred_avgs %>% 
  left_join(p_stage1_avgs, by = c("pNum", "condition"))
```


```{r}

# add comp modelling data

# load in the RW72 results
load("Simulations NP learning/UNLL01_RW72_results.RData")
RW72_raw <- vs_res
RW72_raw <- RW72_raw %>% mutate(model = "RW72", .before = 1) %>% ungroup()

# load in the Mack75 results
load("Simulations NP learning/UNLL01_Mack75_results.RData")
Mack75_raw <- vs_res 
Mack75_raw <- Mack75_raw %>% mutate(model = "Mack75", .before = 1) %>% ungroup()

complete_sims <- rbind(RW72_raw, Mack75_raw)

# generic function for plotting raw sim results as line graphs
make_model_line_plot <- function(dataIn, titleIn = "default_title") {
  dataIn %>% 
    ggplot(aes(x = trial, y = value, colour = s1)) +
    geom_line() +
    facet_grid(rows = vars(group), cols = vars(s2)) +
    labs(title = titleIn,
        colour = "Cue")
  }

# plot RW72 raw sim results as line graph for both associations
RW72_line_plot <- 
  filter(complete_sims, model == "RW72") %>% 
    make_model_line_plot(title = "RW72 line plot all stages")

# plot Mack75 raw sim results as line graph for both associations
Mack75_line_plot <- 
  filter(complete_sims, model == "Mack75") %>% 
    make_model_line_plot(title = "Mack75 line plot all stages")

# calculate differential V for cue types
sim_data_cue_types <- 
  complete_sims %>% 
  pivot_wider(names_from = s2, values_from = value) %>% 
  mutate(diff_v = case_match(s1,
                            "A" ~ O1-O2,
                            "B" ~ O2-O1,
                            "V" ~ O1-O2,
                            "W" ~ O2-O1),
        stage = case_when(trial < 120 ~ 1,
                          trial <= 200 ~ 2,
                          trial > 200 ~ 3),
        cue_type = case_match(s1,
                            "A" ~ "P",
                            "B" ~ "P",
                            "V" ~ "NP",
                            "W" ~ "NP"),
        cue_type = fct_relevel(cue_type, "P")) %>% 
  select(model, condition = group, stage, trial, cue_type, diff_v)



# summarise and plot empirical data for cue_types for each stage
emp_data_fig <- 
  p_pred_avgs %>%
  filter(condition_rank <= 20) %>% 
  group_by(condition, stage, cue_type) %>% 
  summarise(grp_avg = mean(avg_diff_score),
            grp_se = sd(avg_diff_score)/sqrt(n())) %>% 
  ggplot(aes(x = condition, y = grp_avg, fill = cue_type)) +
  geom_col(position = position_dodge(.9), colour = "black") +
  geom_errorbar(aes(ymin = grp_avg - grp_se,
                    ymax = grp_avg + grp_se),
                position = position_dodge(.9),
                width = .2) +
  labs(title = "Empirical test data across stages",
       y = "Rating difference score",
       fill = element_blank())+
  facet_wrap(vars(stage)) +
  theme_classic(base_size = 18) +
  scale_fill_manual(values = c("black", "grey"))

# summarise and plot computational modelling data for cue_types for each stage
make_model_col_plot <- function(dataIn, titleIn = "default_title") {
  
  dataIn %>% 
  group_by(condition, stage, cue_type) %>% 
  summarise(meanV = round(mean(diff_v),3)) %>% 
  ggplot(aes(x = condition, y = meanV, fill = cue_type)) +
  geom_col(position = position_dodge(.9), colour = "black") +
  labs(title = titleIn,
       y = "Differential associative strength",
       fill = element_blank())+
  facet_wrap(vars(stage)) +
  theme_classic(base_size = 14) +
  scale_fill_manual(values = c("black", "grey"))
  
}

mack75_fig <- 
  sim_data_cue_types %>% 
  filter(model == "Mack75") %>% 
  make_model_col_plot(titleIn = "Mack75 simulation")

RW72_fig <- 
  sim_data_cue_types %>% 
  filter(model == "RW72") %>% 
  make_model_col_plot(titleIn = "RW72 simulation")

emp_data_fig / mack75_fig / RW72_fig

# plot test data as acquisition lines across the stage 3 tests
p_pred_avgs %>%
  filter(condition_rank <= 20,
         block %in% 6:8) %>% 
  group_by(condition, block, cue_type) %>% 
  summarise(grp_avg = mean(avg_diff_score),
            grp_se = sd(avg_diff_score)/sqrt(n())) %>% 
  ggplot(aes(x = block, y = grp_avg, colour = cue_type)) +
  geom_line(aes(group=cue_type)) +
  geom_errorbar(aes(ymin = grp_avg - grp_se,
                    ymax = grp_avg + grp_se),
                width = .2) +
  labs(title = "Stage 3 test data",
       y = "Rating difference score",
       fill = element_blank())+
  facet_wrap(vars(condition)) +
  theme_classic(base_size = 14) +
  scale_colour_manual(values = palette()[3:2])
  


  


```

```{r}

# get STAGE 1 data
stg1_test <- 
  p_pred_avgs %>% 
  filter(condition_rank <= 20) %>%
  filter(stage == "stage1") 

# Bayesian ANOVA
stg1_BF <- 
  anovaBF(avg_diff_score ~ condition*cue_type, 
          data = stg1_test, 
          whichRandom = "pNum")

stg1_BF[4]/stg1_BF[3]

# Traditional ANOVA
stg1_anova <- 
  aov_car(avg_diff_score ~ condition + Error(pNum/cue_type),
          data = stg1_test)

# cue_type effect for each condition
emmeans(stg1_anova, pairwise ~ cue_type | condition)

# condition effect for each cue_type
emmeans(stg1_anova, pairwise ~ condition | cue_type)

# get STAGE 2 data
stg2_test <- 
  p_pred_avgs %>% 
  filter(condition_rank <= 20) %>%
  filter(stage == "stage2") 

# Bayesian ANOVA
stg2_BF <- 
  anovaBF(avg_diff_score ~ condition*cue_type, 
          data = stg2_test, 
          whichRandom = "pNum")

stg2_BF[4]/stg2_BF[3]

# Traditional ANOVA
stg2_anova <- 
  aov_car(avg_diff_score ~ condition + Error(pNum/cue_type),
          data = stg2_test)

# cue_type effect for each condition
emmeans(stg2_anova, pairwise ~ cue_type | condition)

# condition effect for each cue_type
emmeans(stg2_anova, pairwise ~ condition | cue_type)



# get STAGE 3 data
stg3_test <- 
  p_pred_avgs %>% 
  filter(condition_rank <= 20) %>%
  filter(stage == "stage3") 

# Bayesian ANOVA
stg3_BF <- 
  anovaBF(avg_diff_score ~ condition*cue_type, 
          data = stg3_test, 
          whichRandom = "pNum")

stg3_BF[4]/stg3_BF[3]

# Traditional ANOVA
stg3_anova <- 
  aov_car(avg_diff_score ~ condition + Error(pNum/cue_type),
          data = stg3_test)

# cue_type effect for each condition
emmeans(stg3_anova, pairwise ~ cue_type | condition)

# condition effect for each cue_type
emmeans(stg3_anova, pairwise ~ condition | cue_type)
```


```{r}

# are test scores in Stage 3 different to Stage 2?

# get stage 3 data
stg2_3_test <- 
  p_pred_avgs %>% 
  filter(condition_rank <= 20) %>%
  filter(stage == "stage3" | stage == "stage2") 

# Bayesian ANOVA
stg2_3_BF <- 
  anovaBF(avg_diff_score ~ condition*stage*cue_type, 
          data = stg2_3_test, 
          whichRandom = "pNum")

stg2_3_BF[18]/stg2_3_BF[12]

# Traditional ANOVA
stg2_3_anova <- 
  aov_car(avg_diff_score ~ condition + Error(pNum/(cue_type*stage)),
          data = stg2_3_test)

# stage effect for each condition
NP_stage_effect <- 
  p_pred_avgs %>% 
  filter(condition_rank <= 20) %>%
  filter(cue_type == "NP") %>% 
  filter(stage == "stage3" | stage == "stage2") 

NP_stage_anova <- 
  aov_car(avg_diff_score ~ condition + Error(pNum/(stage)),
          data = NP_stage_effect)

emmeans(NP_stage_anova, pairwise ~ stage | condition)

# are the 




```


